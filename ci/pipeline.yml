---
meta:
  cf-creds-staging: &cf-creds-staging
    CF_API_URL: ((cf-api-url-staging))
    CF_USERNAME: ((cf-deploy-username-staging))
    CF_PASSWORD: ((cf-deploy-password-staging))
    CF_ORGANIZATION: ((cf-organization-staging))
    CF_SPACE: ((cf-space-staging))
  cf-creds-production: &cf-creds-production
    CF_API_URL: ((cf-api-url-production))
    CF_USERNAME: ((cf-deploy-username-production))
    CF_PASSWORD: ((cf-deploy-password-production))
    CF_ORGANIZATION: ((cf-organization-production))
    CF_SPACE: ((cf-space-production))

jobs:
- name: set-self
  plan:
    - get: broker-src
      trigger: true
    - set_pipeline: self
      file: broker-src/ci/pipeline.yml

- name: test-cdn-broker
  plan:
  - get: broker-src
    trigger: true
    passed: [set-self]
  - task: run-tests
    file: broker-src/ci/run-tests.yml

- name: push-cf-cdn-service-broker-staging
  plan:
  - in_parallel:
    - get: broker-src
      passed: [test-cdn-broker]
      trigger: true
    - get: pipeline-tasks
  - task: create-db
    file: broker-src/ci/create-db.yml
    params:
      # Note: Name must match service name in manifest
      SERVICE_TYPE: aws-rds
      SERVICE_NAME: rds-cdn-broker
      SERVICE_PLAN: shared-psql
      <<: *cf-creds-staging
  - in_parallel:
    - put: broker-deploy-staging
      params:
        path: broker-src
        manifest: broker-src/manifest-broker.yml
        environment_variables: &cfenv-staging
          BROKER_USERNAME: ((cdn-broker-user-staging))
          BROKER_PASSWORD: ((cdn-broker-pass-staging))
          EMAIL: ((cdn-broker-email-staging))
          ACME_URL: ((cdn-broker-acme-url-staging))
          BUCKET: ((cdn-broker-bucket-staging))
          IAM_PATH_PREFIX: ((cdn-broker-iam-path-prefix-staging))
          AWS_ACCESS_KEY_ID: ((cdn-broker-access-key-id-staging))
          AWS_SECRET_ACCESS_KEY: ((cdn-broker-secret-access-key-staging))
          AWS_DEFAULT_REGION: ((cdn-broker-region-staging))
          SERVER_SIDE_ENCRYPTION: AES256
          API_ADDRESS: ((cf-api-url-staging))
          CLIENT_ID: ((cdn-broker-client-id-staging))
          CLIENT_SECRET: ((cdn-broker-client-secret-staging))
          DEFAULT_ORIGIN: ((cdn-broker-default-origin-staging))
          USER_ID_POOL: ((cdn-broker-user-id-pool-staging))
    - put: broker-deploy-staging
      params:
        path: broker-src
        manifest: broker-src/manifest-cron.yml
        environment_variables: *cfenv-staging
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy cf-cdn-service-broker on "((cf-api-url-staging))"
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: push-cf-cdn-service-broker-production
  plan:
  - in_parallel:
    - get: broker-src
      passed: [push-cf-cdn-service-broker-staging]
      trigger: true
    - get: pipeline-tasks
  - task: create-db
    file: broker-src/ci/create-db.yml
    params:
      # Note: Name must match service name in manifest
      SERVICE_TYPE: aws-rds
      SERVICE_NAME: rds-cdn-broker
      SERVICE_PLAN: shared-psql
      <<: *cf-creds-production
  - in_parallel:
    - put: broker-deploy-production
      params:
        path: broker-src
        manifest: broker-src/manifest-broker.yml
        environment_variables: &cfenv-production
          BROKER_USERNAME: ((cdn-broker-user-production))
          BROKER_PASSWORD: ((cdn-broker-pass-production))
          EMAIL: ((cdn-broker-email-production))
          ACME_URL: ((cdn-broker-acme-url-production))
          BUCKET: ((cdn-broker-bucket-production))
          IAM_PATH_PREFIX: ((cdn-broker-iam-path-prefix-production))
          AWS_ACCESS_KEY_ID: ((cdn-broker-access-key-id-production))
          AWS_SECRET_ACCESS_KEY: ((cdn-broker-secret-access-key-production))
          AWS_DEFAULT_REGION: ((cdn-broker-region-production))
          SERVER_SIDE_ENCRYPTION: AES256
          API_ADDRESS: ((cf-api-url-production))
          CLIENT_ID: ((cdn-broker-client-id-production))
          CLIENT_SECRET: ((cdn-broker-client-secret-production))
          DEFAULT_ORIGIN: ((cdn-broker-default-origin-production))
          USER_ID_POOL: ((cdn-broker-user-id-pool-production))
    - put: broker-deploy-production
      params:
        path: broker-src
        manifest: broker-src/manifest-cron.yml
        environment_variables: *cfenv-production
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy cf-cdn-service-broker on "((cf-api-url-production))"
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-failure-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

resources:
- name: broker-src
  type: git
  source:
    uri: https://github.com/cloud-gov/cf-cdn-service-broker.git
    branch: main
    commit_verification_keys: ((cloud-gov-pgp-keys))

- name: pipeline-tasks
  type: git
  source:
    uri: https://github.com/cloud-gov/cg-pipeline-tasks
    branch: main
    commit_verification_keys: ((cloud-gov-pgp-keys))

- name: broker-deploy-staging
  type: cf
  source:
    api: ((cf-api-url-staging))
    username: ((cf-deploy-username-staging))
    password: ((cf-deploy-password-staging))
    organization: ((cf-organization-staging))
    space: ((cf-space-staging))

- name: broker-deploy-production
  type: cf
  source:
    api: ((cf-api-url-production))
    username: ((cf-deploy-username-production))
    password: ((cf-deploy-password-production))
    organization: ((cf-organization-production))
    space: ((cf-space-production))

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

resource_types:
- name: slack-notification
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: slack-notification-resource
    aws_region: us-gov-west-1
    tag: latest


- name: git
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: git-resource
    aws_region: us-gov-west-1
    tag: latest

- name: cf
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: cf-resource
    aws_region: us-gov-west-1
    tag: latest

- name: registry-image
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: registry-image-resource
    aws_region: us-gov-west-1
    tag: latest
